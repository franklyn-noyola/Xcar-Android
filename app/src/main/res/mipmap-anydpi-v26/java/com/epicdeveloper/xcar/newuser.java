package com.epicdeveloper.xcar;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.text.method.HideReturnsTransformationMethod;
import android.text.method.LinkMovementMethod;
import android.text.method.PasswordTransformationMethod;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.epicdeveloper.xcar.ui.LoginErrorsValidation;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.messaging.FirebaseMessaging;

import java.util.Locale;


public class newuser extends AppCompatActivity {
    EditText name_user, plate_user, email_user, pass_user, confirm_pass;
    TextView linkButton,newUserLabel,textView2;
    String cartype="",carBrand="", carModel="", carColor="", yearCar="", resetPass="0";
    Button btnRegister;
    String welcomeMessage;
    String headerMessage;
    String bodyMessage;
    public String codeActivated;
    String farewellMessage;
    String allMessage;
    public String userPlate;
    CheckBox acceptButton;
    Context context;
    String userLanguage;

    Resources resources;
    String termsLink;


    private DatabaseReference Users;

    @SuppressLint("ClickableViewAccessibility")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_newuser);
        name_user = (EditText) findViewById(R.id.newUserNameField);
        plate_user =  (EditText) findViewById(R.id.newUserPlateField);
        email_user = (EditText)  findViewById(R.id.newUserEmailField);
        pass_user = (EditText)   findViewById(R.id.newUserPassField);
        confirm_pass = (EditText) findViewById(R.id.newUserPassConField);
        btnRegister = (Button) findViewById(R.id.registerButton);
        acceptButton = (CheckBox) findViewById(R.id.checkBox);
        linkButton = (TextView) findViewById(R.id.terminos);
        newUserLabel = (TextView) findViewById(R.id.newUserlbl);
        textView2 = (TextView) findViewById(R.id.textView2);
        acceptButton.setEnabled(true);
        email_user.setEnabled(true);
        plate_user.setEnabled(true);
        pass_user.setEnabled(true);
        confirm_pass.setEnabled(true);
        name_user.setEnabled(true);
        userLanguage= Locale.getDefault().getLanguage().toUpperCase();
        translanguage();
        setupLinkButton();

        pass_user.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                final int DRAWABLE_LEFT = 0;
                final int DRAWABLE_TOP = 1;
                final int DRAWABLE_RIGHT = 2;
                final int DRAWABLE_BOTTOM = 3;

                if(event.getAction() == MotionEvent.ACTION_UP) {
                    if(event.getRawX() >= (pass_user.getRight() - pass_user.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {
                        if (pass_user.getTransformationMethod() == HideReturnsTransformationMethod.getInstance()){
                            pass_user.setTransformationMethod(PasswordTransformationMethod.getInstance());
                            pass_user.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.showpass, 0);
                        }else{
                            pass_user.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
                            pass_user.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.hidepass, 0);
                        }
                        return true;
                    }
                }

                return false;
            }
        });

        confirm_pass.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                final int DRAWABLE_LEFT = 0;
                final int DRAWABLE_TOP = 1;
                final int DRAWABLE_RIGHT = 2;
                final int DRAWABLE_BOTTOM = 3;

                if(event.getAction() == MotionEvent.ACTION_UP) {
                    if(event.getRawX() >= (confirm_pass.getRight() - confirm_pass.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {
                        if (confirm_pass.getTransformationMethod() == HideReturnsTransformationMethod.getInstance()){
                            confirm_pass.setTransformationMethod(PasswordTransformationMethod.getInstance());
                            confirm_pass.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.showpass, 0);
                        }else{
                            confirm_pass.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
                            confirm_pass.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.hidepass, 0);
                        }
                        return true;
                    }
                }

                return false;
            }
        });


        btnRegister.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                context = LocaleHelper.setLocale(getApplication(), userLanguage);
                resources = context.getResources();

              if (TextUtils.isEmpty(name_user.getText().toString()) || TextUtils.isEmpty(plate_user.getText().toString()) || TextUtils.isEmpty(email_user.getText().toString()) || TextUtils.isEmpty(pass_user.getText().toString()) || TextUtils.isEmpty(confirm_pass.getText().toString())){
                    Toast.makeText(getApplicationContext(),resources.getString(R.string.allfieldFilled), Toast.LENGTH_SHORT).show();
                    return;
                }
                if (plate_user.getText().toString().length()<5 || plate_user.getText().toString().length()>10){
                    Toast.makeText(getApplicationContext(),resources.getString(R.string.wrong_format_plate), Toast.LENGTH_SHORT).show();
                    return;
                }
                if (!LoginErrorsValidation.isValid(pass_user.getText().toString())){
                    Toast.makeText(getApplicationContext(),resources.getString(R.string.wrong_password), Toast.LENGTH_LONG).show();
                    return;
                }

                if (!pass_user.getText().toString().equals(confirm_pass.getText().toString())){
                    Toast.makeText(getApplicationContext(),resources.getString(R.string.noPassMatch), Toast.LENGTH_SHORT).show();
                    return;
                }

                if (!LoginErrorsValidation.emailValidation(email_user.getText().toString())){
                    Toast.makeText(getApplicationContext(),resources.getString(R.string.wrongEmailFormat), Toast.LENGTH_SHORT).show();
                    return;
                }
                if (!acceptButton.isChecked()){
                    Toast.makeText(getApplicationContext(),resources.getString(R.string.noTermsAccepted), Toast.LENGTH_SHORT).show();
                    return;
                }

                if (btnRegister.getText().equals(resources.getString(R.string.backLogin))){
                    finish();
                    return;
                }
                final UsersConnected user = new UsersConnected(name_user.getText().toString(), plate_user.getText().toString().toUpperCase(),  email_user.getText().toString(),  pass_user.getText().toString(), cartype, carBrand,carColor,carModel,yearCar, resetPass);

                final ActivatedUser activated = new ActivatedUser("OFF", plate_user.getText().toString().toUpperCase());
                DatabaseReference userActivated = FirebaseDatabase.getInstance().getReference("Users/ActivatedUser");
                Users = FirebaseDatabase.getInstance().getReference("Users");
                Users.orderByChild("plate_user").equalTo(plate_user.getText().toString().toUpperCase()).addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                        if(!dataSnapshot.exists()){
                            userPlate = plate_user.getText().toString().toUpperCase();
                            String id2 = userActivated.push().getKey();
                            String id = Users.push().getKey();
                            Users.child(id).setValue(user);
                            userActivated.child(id2).setValue(activated);
                            if (userLanguage.equals("ES")){
                                Toast.makeText(getApplicationContext(),"El usuario "+plate_user.getText().toString().toUpperCase()+" ha sido registrado, por favor revise su correo electr√≥nico (Bandeja de entrada o SPAM) para activarlo.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("EN")){
                                Toast.makeText(getApplicationContext(),"Account "+plate_user.getText().toString().toUpperCase()+" has been registered, pleasae check your email (Inbox or SPAM) to activate it.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("FR")){
                                Toast.makeText(getApplicationContext(),"L'utilisateur "+ plate_user.getText().toString().toUpperCase() + "a √©t√© enregistr√©, v√©rifiez votre Email (Bo√Æte de r√©ception ou SPAM) pour l'activer.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("DE")){
                                Toast.makeText(getApplicationContext(),"Der Benutzer "+plate_user.getText().toString().toUpperCase() +" wurde registriert. √úberpr√ºfen Sie Ihre E-Mails (Posteingang oder SPAM), um sie zu aktivieren.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("IT")){
                                Toast.makeText(getApplicationContext(),"L'utente "+ plate_user.getText().toString().toUpperCase() +" √® stato registrato, controlla la tua Email (Posta in arrivo o SPAM) per attivarlo.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("PT")){
                                Toast.makeText(getApplicationContext(),"O usu√°rio "+ plate_user.getText ().toString().toUpperCase() +" foi registrado, por favor, revisar seu correio eletr√¥nico (Bandeja de entrada o SPAM) para ativar.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("RU")){
                                Toast.makeText(getApplicationContext(),"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "+ plate_user.getText ().toString ().toUpperCase() +" –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (–í—Ö–æ–¥—è—â–∏–µ –∏–ª–∏ –°–ü–ê–ú), —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("ZH")){
                                Toast.makeText(getApplicationContext(),"Áî®Êà∑ " + plate_user.getText().toString().toUpperCase()+" Â∑≤Ê≥®ÂÜåÔºåËØ∑Ê£ÄÊü•ÊÇ®ÁöÑÁîµÂ≠êÈÇÆ‰ª∂ÔºàÊî∂‰ª∂ÁÆ±ÊàñÂûÉÂúæÈÇÆ‰ª∂Ôºâ‰ª•Â∞ÜÂÖ∂ÊøÄÊ¥ª.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("JA")){
                                Toast.makeText(getApplicationContext(),"„É¶„Éº„Ç∂„Éº "+ plate_user.getText().toString().toUpperCase()+" „ÅåÁôªÈå≤„Åï„Çå„Åæ„Åó„Åü„ÄÇ„É°„Éº„É´ÔºàÂèó‰ø°„Éà„É¨„Ç§„Åæ„Åü„ÅØ„Çπ„Éë„É†Ôºâ„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("NL")){
                                Toast.makeText(getApplicationContext(),"Gebruiker "+ plate_user.getText ().toString().toUpperCase() +" is geregistreerd, controleer uw e-mail (Inbox of SPAM) om deze te activeren.", Toast.LENGTH_LONG).show();
                            }

                            if (userLanguage.equals("PL")){
                                Toast.makeText(getApplicationContext(),"U≈ºytkownik "+ plate_user.getText().toString().toUpperCase() +" zosta≈Ç zarejestrowany, sprawd≈∫ sw√≥j adres e-mail (skrzynkƒô odbiorczƒÖ lub SPAM), aby go aktywowaƒá.", Toast.LENGTH_LONG).show();
                            }

                            if (userLanguage.equals("KO")){
                                Toast.makeText(getApplicationContext(),"ÏÇ¨Ïö©Ïûê "+ plate_user.getText().toString().toUpperCase() +"Í∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§. ÌôúÏÑ±ÌôîÌïòÎ†§Î©¥ Ïù¥Î©îÏùº (Î∞õÏùÄ Ìé∏ÏßÄÌï® ÎòêÎäî Ïä§Ìå∏)ÏùÑ ÌôïÏù∏ÌïòÏã≠ÏãúÏò§.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("SV")){
                                Toast.makeText(getApplicationContext(),"Anv√§ndaren "+ plate_user.getText().toString().toUpperCase() +" har registrerats, kontrollera din e-post (Inkorgen eller SPAM) f√∂r att aktivera den.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("AR")){
                                 Toast.makeText(getApplicationContext(),plate_user.getText().toString().toUpperCase() +" ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä (ÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿßÿ±ÿØ ÿ£Ÿà ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿßŸÇÿ™ÿ≠ÿßŸÖŸäÿ©) ŸÑÿ™ŸÜÿ¥Ÿäÿ∑Ÿá.",Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("HI")){
                                Toast.makeText(getApplicationContext(),"‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ "+ plate_user.getText().toString().toUpperCase() +" ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ (‡§á‡§®‡§¨‡•â‡§ï‡•ç‡§∏ ‡§Ø‡§æ ‡§∏‡•ç‡§™‡•à‡§Æ) ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("UR")){
                                Toast.makeText(getApplicationContext(), plate_user.getText().toString().toUpperCase() +" ÿ±ÿ¨ÿ≥Ÿπÿ±⁄à €ÅŸà⁄Ü⁄©ÿß €Å€í ÿå ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ÿßÿ≥€í ŸÅÿπÿßŸÑ ⁄©ÿ±ŸÜ€í ⁄©€í ŸÑÿ¶€í ÿßŸæŸÜÿß ÿß€å ŸÖ€åŸÑ (ÿßŸÜ ÿ®ÿß⁄©ÿ≥ €åÿß ÿßÿ≥Ÿæ€åŸÖ) ⁄Ü€å⁄© ⁄©ÿ±€å⁄∫€î", Toast.LENGTH_LONG).show();
                            }

                            btnRegister.setHint(resources.getString(R.string.backLogin));
                            email_user.setEnabled(false);
                            plate_user.setEnabled(false);
                            pass_user.setEnabled(false);
                            confirm_pass.setEnabled(false);
                            name_user.setEnabled(false);
                            acceptButton.setEnabled(false);
                            if (userLanguage.equals("ES")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),"Bienvenido/a a XCar", sendWelcomeMessageES());
                            }
                            if (userLanguage.equals("EN")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(), resources.getString(R.string.welcomeHomeText), sendWelcomeMessageEN());

                            }
                            if (userLanguage.equals("FR")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageFR());
                            }
                            if (userLanguage.equals("DE")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageDE());
                            }
                            if (userLanguage.equals("IT")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageIT());
                            }
                            if (userLanguage.equals("PT")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessagePT());
                            }
                            if (userLanguage.equals("RU")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageRU());
                            }
                            if (userLanguage.equals("ZH")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageZH());
                            }
                            if (userLanguage.equals("JA")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageJA());
                            }
                            if (userLanguage.equals("NL")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageNL());
                            }

                            if (userLanguage.equals("PL")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessagePL());
                            }
                            if (userLanguage.equals("KO")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageKO());
                            }
                            if (userLanguage.equals("SV")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageSV());
                            }
                            if (userLanguage.equals("AR")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageAR());
                            }
                            if (userLanguage.equals("HI")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageHI());
                            }
                            if (userLanguage.equals("UR")){
                                sendEmail.sendEmailMessage(email_user.getText().toString(),resources.getString(R.string.welcomeHomeText), sendWelcomeMessageUR());
                            }
                            createLanguageUser();
                            finish();
                            Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                            startActivity(intent);

                        }else{
                            if (userLanguage.equals("ES")) {
                                Toast.makeText(getApplicationContext(), "La m√°tricula " + plate_user.getText().toString().toUpperCase() + " ya est√° registrada", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("EN")){
                                Toast.makeText(getApplicationContext(), "Plate number " + plate_user.getText().toString().toUpperCase() + " is already registered", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("FR")){
                                Toast.makeText(getApplicationContext(), "Num√©ro de plaque " + plate_user.getText().toString().toUpperCase() + " est d√©j√† enregistr√©", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("DE")){
                                Toast.makeText(getApplicationContext(), "Kennzeichen "+ plate_user.getText ().toString().toUpperCase() + " ist bereits registriert", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("IT")){
                                Toast.makeText(getApplicationContext(), "Numero di targa " + plate_user.getText ().toString ().toUpperCase() + " √® gi√† registrato", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("PT")){
                                Toast.makeText(getApplicationContext(), "N√∫mero da placa " + plate_user.getText ().toString ().toUpperCase() + " j√° foi cadastrado", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("RU")){
                                Toast.makeText(getApplicationContext(), "–¢–∞–±–ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä "+ plate_user.getText ().toString ().toUpperCase() +" —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("ZH")){
                                Toast.makeText(getApplicationContext(), "ËΩ¶ÁâåÂè∑ " + plate_user.getText().toString().toUpperCase()+" Â∑≤ÁªèÊ≥®ÂÜå", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("JA")){
                                Toast.makeText(getApplicationContext(), "„Éó„É¨„Éº„ÉàÁï™Âè∑ "+ plate_user.getText().toString().toUpperCase()+" „ÅØ„Åô„Åß„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("NL")){
                                Toast.makeText(getApplicationContext(), "Kenteken "+ plate_user.getText ().toString().toUpperCase() +" is al geregistreerd", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("PL")){
                                Toast.makeText(getApplicationContext(), "Tabliczka "+ plate_user.getText().toString().toUpperCase() +" jest ju≈º zarejestrowana", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("KO")){
                                Toast.makeText(getApplicationContext(), "ÌîåÎ†àÏù¥Ìä∏ "+ plate_user.getText().toString().toUpperCase() +"Í∞Ä Ïù¥ÎØ∏ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("SV")){
                                Toast.makeText(getApplicationContext(), "Plattan "+ plate_user.getText().toString().toUpperCase() +" √§r redan registrerad", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("AR")){
                                Toast.makeText(getApplicationContext()," ÿßŸÑŸÑŸàÿ≠ÿ© "+ plate_user.getText().toString().toUpperCase() +"\" ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿßŸÑŸÅÿπŸÑ,," ,  Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("HI")){
                                Toast.makeText(getApplicationContext(), "‡§™‡•ç‡§≤‡•á‡§ü "+ plate_user.getText().toString().toUpperCase() +" ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à", Toast.LENGTH_LONG).show();
                            }
                            if (userLanguage.equals("UR")){
                                Toast.makeText(getApplicationContext(), "ŸæŸÑ€åŸπ "+ plate_user.getText ().toString ().toUpperCase() +" Ÿæ€ÅŸÑ€í €Å€å ÿ±ÿ¨ÿ≥Ÿπÿ±⁄à €Å€í", Toast.LENGTH_LONG).show();
                            }

                        }
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError error) {

                    }
                });
            }
        });

    }

    private void createLanguageUser() {
            FirebaseMessaging.getInstance().getToken().addOnCompleteListener(new OnCompleteListener<String>() {
                @Override
                public void onComplete(@NonNull Task<String> task) {
                    if (!task.isSuccessful()){
                        Log.w("TAG", "Not able to get token", task.getException());
                        return;
                    }
                    String mToken = task.getResult();
                    final languageUserData createUserLanguage = new languageUserData(mToken,userLanguage);
                    DatabaseReference createLanguageUser =  FirebaseDatabase.getInstance().getReference("Users/userLanguage");
                    createLanguageUser.push().setValue(createUserLanguage);
            }
        });
    }

    private void setupLinkButton() {
        linkButton.setTextColor(Color.BLUE);
        linkButton.setMovementMethod(LinkMovementMethod.getInstance());
        linkButton.setLinkTextColor(Color.BLUE);

        linkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(termsLink));
                startActivity(intent);
            }
        });
    }

    public String sendWelcomeMessageES(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Bienvenido/a a XCar!!!</font></b><br><br>";
        headerMessage="Estimado Sr./Sra "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Gracias por registrarse en el mundo de XCar. Para activar el usuario, haga click en este link: <a href=epicdevelopers.app?ES"+plate_user.getText().toString().toUpperCase()+">Activar usuario</a> <br><br>";
        farewellMessage="Un saludo cordial,<br>El equipo de XCar.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageEN(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Welcome to XCar!!!</font></b><br><br>";
        headerMessage="Dear Mr/Mrs. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Thanks for regisgtering to XCar world. To activate your account, click on this link: <a href=epicdevelopers.app?EN"+plate_user.getText().toString().toUpperCase()+">Activate account</a> <br><br>";
        farewellMessage="Truly yours,<br>XCar Team.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageFR(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Bienvenue √† XCar!!!</font></b><br><br>";
        headerMessage="Cher Monsieur / Madame. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Merci de vous enregistrer dans le monde XCar. Pour activer votre utilisateur, cliquez sur ce lien: <a href=epicdevelopers.app?FR"+plate_user.getText().toString().toUpperCase()+">Activer l'utilisateur</a> <br><br>";
        farewellMessage="Cordialement,<br>L'√©quipe XCar.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageIT(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Benvenuto in XCar!!!</font></b><br><br>";
        headerMessage="Caro signor/signora "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Grazie per esserti registrato a XCar world. Per attivare il tuo utente, fare clic su questo collegamento: <a href=epicdevelopers.app?IT"+plate_user.getText().toString().toUpperCase()+">Attiva utente</a> <br><br>";
        farewellMessage="Cordiali saluti,<br>Il team XCar.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageDE(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Willkommen bei XCar!!!</font></b><br><br>";
        headerMessage="Sehr geehrter Herr/Frau "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Vielen Dank, dass Sie sich bei XCar world registriert haben. Kopieren Sie diesen Aktivierungscode, klicken Sie auf diesen Link: <a href=epicdevelopers.app?DE"+plate_user.getText().toString().toUpperCase()+">Benutzer aktivieren</a> <br><br>";
        farewellMessage="Mit freundlichen Gr√º√üen,<br>Das XCar-Team.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessagePT(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Bem-vindo a XCar!!!</font></b><br><br>";
        headerMessage="Prezado Sr./Sra. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Obrigado por se registrar no mundo de XCar. Para ativar o usu√°rio, clique neste link: <a href=epicdevelopers.app?PT"+plate_user.getText().toString().toUpperCase()+">Ativar usu√°rio</a> <br><br>";
        farewellMessage="Sinceramente,<br>A equipe XCar.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageRU(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ XCar!!!</font></b><br><br>";
        headerMessage="–£–≤–∞–∂–∞–µ–º—ã–π –≥–æ—Å–ø–æ–¥–∏–Ω/–≥–æ—Å–ø–æ–∂–∞ "+ name_user.getText (). toString ()+"<br><br>";
        bodyMessage="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –º–∏—Ä–µ XCar. –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É: <a href=epicdevelopers.app?RU"+plate_user.getText().toString().toUpperCase()+">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> <br><br>";
        farewellMessage="–ò—Å–∫—Ä–µ–Ω–Ω–µ,<br>–ö–æ–º–∞–Ω–¥–∞ XCar.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageZH(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Ê¨¢ËøéÊù•Âà∞XCar!!!</font></b><br><br>";
        headerMessage="‰∫≤Áà±ÁöÑÂÖàÁîü/Â§´‰∫∫Ôºö " + name_user.getText().toString()+"<br><br>";
        bodyMessage="ÊÑüË∞¢ÊÇ®Ê≥®ÂÜåÂà∞ÊâÄÊúâËøûÊé•ÁöÑ‰∏ñÁïå„ÄÇË¶ÅÊøÄÊ¥ªÊÇ®ÁöÑÂ∏êÊà∑ÔºåÁÇπÂáªÊ≠§ÈìæÊé•:<a href=epicdevelopers.app?ZH"+plate_user.getText().toString().toUpperCase()+">ÊøÄÊ¥ªÂ∏êÊà∑</a> <br><br>";
        farewellMessage="‰∫≤ÂàáÁöÑÈóÆÂÄô,<br>ËØ•Âõ¢ÈòüÁöÑ XCar„ÄÇ";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageJA(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">XCar„Å∏„Çà„ÅÜ„Åì„Åù!!!</font></b><br><br>";
        headerMessage="Ë¶™ÊÑõ„Å™„Çã„Éü„Çπ„Çø„Éº/„Éü„Çª„Çπ"+ name_user.getText().toString()+"<br><br>";
        bodyMessage="XCarworld„Å´ÁôªÈå≤„Åó„Å¶„ÅÑ„Åü„Å†„Åç„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ„Åô„Çã„Å´„ÅØ„ÄÅ„Åì„ÅÆ„É™„É≥„ÇØ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö<a href=epicdevelopers.app/?JA"+plate_user.getText().toString().toUpperCase()+">„É¶„Éº„Ç∂„Éº„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ</a> <br><br>";
        farewellMessage="ÂøÉ„Åã„Çâ,<br>XCar„ÉÅ„Éº„É†„ÄÇ";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageNL(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Welkom bij XCar!!!</font></b><br><br>";
        headerMessage="Beste meneer/mevrouw. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Bedankt voor uw aanmelding bij XCar world. Om uw account te activeren, klikt u op deze link: <a href=epicdevelopers.app?NL"+plate_user.getText().toString().toUpperCase()+"> Activeer gebruiker</a> <br><br>";
        farewellMessage="Oprecht,<br>Het XCar -team.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }
    public String sendWelcomeMessagePL(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">Witamy w XCar!!!</font></b><br><br>";
        headerMessage="Szanowny Panie/Pani.. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Bedankt voor uw aanmelding bij XCar world. Om uw account te activren, kliknij ten link: <a href=epicdevelopers.app?PL"+plate_user.getText().toString().toUpperCase()+">Activeer gebruiker</a> <br><br>";
        farewellMessage="Z powa≈ºaniem,<br>Zesp√≥≈Ç XCar.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageKO(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">XCarÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!!!</font></b><br><br>";
        headerMessage="ÏπúÏï†ÌïòÎäî Mr./Ms. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="XCarÏùò ÏÑ∏Í≥ÑÏóê Îì±Î°ù Ìï¥ Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§. Í≥ÑÏ†ïÏùÑ ÌôúÏÑ±ÌôîÌïòÎ†§Î©¥Ïù¥ ÎßÅÌÅ¨Î•º ÌÅ¥Î¶≠ÌïòÏã≠ÏãúÏò§.: <a href=epicdevelopers.app?KO"+plate_user.getText().toString().toUpperCase()+"> ÏÇ¨Ïö©Ïûê ÌôúÏÑ±Ìôî</a> <br><br>";
        farewellMessage="ÏßÑÏ†ïÏúºÎ°ú,<br>XCar ÌåÄ.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageSV(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">V√§lkommen till XCar!!!</font></b><br><br>";
        headerMessage="K√§ra herr/fru. "+name_user.getText().toString()+"<br><br>";
        bodyMessage="Tack f√∂r att du registrerade dig i XCar-v√§rlden. F√∂r att aktivera anv√§ndaren, klicka p√• den h√§r l√§nken: <a href=epicdevelopers.app?SV"+plate_user.getText().toString().toUpperCase()+"> Aktivera anv√§ndare</a> <br><br>";
        farewellMessage="v√§nliga h√§lsningar,<br>XCar-teamet.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }

    public String sendWelcomeMessageHI(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">XCar ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!!!</font></b><br><br>";
        headerMessage="‡§™‡•ç‡§∞‡§ø‡§Ø ‡§∂‡•ç‡§∞‡•Ä / ‡§è‡§Æ‡•§ ‡§è‡§∏‡•§ "+name_user.getText().toString()+"<br><br>";
        bodyMessage="XCar ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è regisgtering ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§Ö‡§™‡§®‡•á ‡§ñ‡§æ‡§§‡•á ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç: <a href=epicdevelopers.app?HI"+plate_user.getText().toString().toUpperCase()+"> ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç</a> <br><br>";
        farewellMessage="‡§à‡§Æ‡§æ‡§®‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•á,<br>XCar ‡§ü‡•Ä‡§Æ.";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }
    public String sendWelcomeMessageAR(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">" +
                "ŸÖÿ±ÿ≠ÿ®Ÿãÿß ÿ®ŸÉ ŸÅŸä XCar"+"!!!</font></b><br><br>";
        headerMessage="" +
                "ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑÿ≥ŸäÿØ / ÿßŸÑÿ≥ŸäÿØÿ©."
                +name_user.getText().toString()+"<br><br>";
        bodyMessage= "ŸÜÿ¥ŸÉÿ±ŸÉ ÿπŸÑŸâ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ŸÅŸä XCar world. ŸÑÿ™ŸÜÿ¥Ÿäÿ∑ ÿ≠ÿ≥ÿßÿ®ŸÉ ÿå ÿßŸÜŸÇÿ± ŸÅŸàŸÇ Ÿáÿ∞ÿß ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑"+
                "<a href=epicdevelopers.app?AR"+plate_user.toString().toUpperCase()+">"+  "ÿ™ŸÜÿ¥Ÿäÿ∑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ" +"</a> <br><br>" ;
        farewellMessage="ÿ®ÿ•ÿÆŸÑÿßÿµ"+"<br"+"ŸÅÿ±ŸäŸÇ XCar";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }
    public String sendWelcomeMessageUR(){
        welcomeMessage="<b><font size=\"20\" color=\"blue\">"+"allCnnected ŸÖ€å⁄∫ ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ"+"</font></b><br><br>";
        headerMessage=" ŸÖÿ≠ÿ™ÿ±ŸÖ ÿ¨ŸÜÿßÿ® / ŸÖÿ≠ÿ™ÿ±ŸÖ€Å "+name_user.getText().toString()+"<br><br>";
        bodyMessage = "XCar ÿØŸÜ€åÿß ŸÖ€å⁄∫ ÿßŸÜÿØÿ±ÿßÿ¨ ⁄©ÿ±ŸÜ€í ⁄©ÿß ÿ¥⁄©ÿ±€å€Å€î ÿßŸæŸÜ€í ÿß⁄©ÿßÿ§ŸÜŸπ ⁄©Ÿà ⁄ÜÿßŸÑŸà ⁄©ÿ±ŸÜ€í ⁄©€í ŸÑÿ¶€í ÿå ÿßÿ≥ ŸÑŸÜ⁄© Ÿæÿ± ⁄©ŸÑ⁄© ⁄©ÿ±€å⁄∫"+"<a href=epicdevelopers.app?UR"+plate_user.toString().toUpperCase()+">"+"ÿµÿßÿ±ŸÅ ⁄©Ÿà ⁄ÜÿßŸÑŸà ⁄©ÿ±€å⁄∫"+"</a> <br><br>";
        farewellMessage="ŸÖÿÆŸÑÿµ,"+"<br>"+"ÿ¢ŸÑ ÿ≥€í ŸÖŸÜÿ≥ŸÑ⁄© Ÿπ€åŸÖ€î";
        return allMessage=welcomeMessage+headerMessage+bodyMessage+farewellMessage;
    }


    public void translanguage(){
        context = LocaleHelper.setLocale(newuser.this, userLanguage);
        resources = context.getResources();
        name_user.setHint(resources.getString(R.string.name));
        plate_user.setHint(resources.getString(R.string.plate_name));
        email_user.setHint(resources.getString(R.string.email_name));
        pass_user.setHint(resources.getString(R.string.password_name));
        confirm_pass.setHint(resources.getString(R.string.confirm_password));
        btnRegister.setHint(resources.getString(R.string.register));
        newUserLabel.setText(resources.getString(R.string.new_user));
        linkButton.setText(resources.getString(R.string.terms_privacy));
        acceptButton.setText(resources.getString(R.string.accept_terms));
        textView2.setText(resources.getString(R.string.password_strong));

        if (userLanguage.equals("ES")){
            acceptButton.setTextSize(9);
            linkButton.setTextSize(10);
        //    linkButton.setY(1670);
         //   linkButton.setX(450);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/spanish";
        }
        if (userLanguage.equals("EN")){
            acceptButton.setTextSize(9);
            linkButton.setTextSize(12);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/english";
        }
        if (userLanguage.equals("FR")){
            acceptButton.setTextSize(9);
            linkButton.setTextSize(9);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/frances";
        }
        if (userLanguage.equals("DE")){
            acceptButton.setTextSize(7);
            linkButton.setTextSize(7);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/aleman";
        }
        if (userLanguage.equals("IT")){
            acceptButton.setTextSize(12);
            linkButton.setTextSize(10);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/italiano";
        }
        if (userLanguage.equals("PT")){
            acceptButton.setTextSize(12);
            linkButton.setTextSize(9);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/portugues";
        }
        if (userLanguage.equals("RU")){
            acceptButton.setTextSize(13);
            linkButton.setTextSize(9);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/ruso";
        }
        if (userLanguage.equals("ZH")){
            acceptButton.setTextSize(13);
            linkButton.setTextSize(14);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/chino";
        }
        if (userLanguage.equals("JA")){
            acceptButton.setTextSize(14);
            linkButton.setTextSize(12);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/japones";
        }
        if (userLanguage.equals("NL")){
            acceptButton.setTextSize(19);
            linkButton.setTextSize(11);
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/holandes";
        }

        if (userLanguage.equals("KO")) {
            termsLink= "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/coreano";
        }
        if (userLanguage.equals("PL")) {
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/polaco";
        }
        if (userLanguage.equals("SV")) {
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/sueco";
        }
        if (userLanguage.equals("AR")) {
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/arabe";
        }
        if (userLanguage.equals("UR")) {
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/urdu";
        }
        if (userLanguage.equals("HI")) {
            termsLink = "https://sites.google.com/view/epicdevelopersapp/allconneted/terminos-y-condicones/hindi";
        }
    }


}
